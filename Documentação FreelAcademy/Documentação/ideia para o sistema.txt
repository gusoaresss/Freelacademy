ideia para o sistema: em certas ocasiões em que o chamado sera resolvido remotamente o sistema deve ter uma aba em que o usuário poderá baixar as plataformas remotas e com um manual de como baixar. anydesk, team viewer, ultraviewr , etc. sistemas remotos gratuito. uma aba para fazer o chamamsdo e descrever o chamado , e ela sera alocada em um local onde o frelaancer irá poder pegar ou solicitar serviço, e o usuário ira ver quem solicitou e ira escolher com base no currículo.


obs: Tela de cadastro deve pedir data de nascimento e se for inferior a 18 anos não deixar se cadastrar. 

obs: Quando o cliente se cadastrar, voltar para a tela de login para ele validar sua entrada 
quando frellancer se cadastarra, pedir para ele baixar o desktop (não obrigatório só disponibilidade)



conexão com banco de dados e api rest.


O Desktop se comunica com o Web via API (Recomendado 🚀)
O Django Web expõe uma API REST (usando Django REST Framework).

O Java/Swing Desktop não acessa o banco diretamente, mas consome essa API para ler/escrever dados.

A aplicação web em Django será responsável pela conexão direta com o banco de dados, e a aplicação desktop em Java/Swing consumirá a API REST exposta pelo Django.

Isso traz diversas vantagens, como segurança, escalabilidade e facilidade de manutenção







